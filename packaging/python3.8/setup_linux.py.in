import sys
import os.path

from cx_Freeze import setup, Executable, hooks

def load_scipy(finder, module):
    finder.IncludePackage("scipy._lib")
    finder.IncludePackage("scipy.misc")
    finder.IncludePackage("scipy.sparse.csgraph._validation")
    finder.IncludePackage("scipy.sparse._csparsetools")

hooks.load_scipy = load_scipy

def load_pyqt5_qtgui(finder, module):
    finder.IncludeModule("PyQt5.QtCore")

hooks.load_PyQt5_QtGui = load_pyqt5_qtgui

def load_pyqt5_qtquick(finder, module):
    finder.IncludeModule("PyQt5.QtCore")
    finder.IncludeModule("PyQt5.QtGui")
    finder.IncludeModule("PyQt5.QtQml")
    finder.IncludeModule("PyQt5.QtNetwork")
    finder.IncludeModule("PyQt5.QtWebSockets")
    finder.IncludeModule("PyQt5._QOpenGLFunctions_2_0")
    finder.IncludeModule("PyQt5._QOpenGLFunctions_4_1_Core")

hooks.load_PyQt5_QtQuick = load_pyqt5_qtquick

search_path = sys.path.copy()
if os.path.exists("/etc/debian_version"):
    python_externalproject_dir = "@EXTERNALPROJECT_INSTALL_PREFIX@/lib/python3/dist-packages/"
    python_install_dir = "@CMAKE_INSTALL_PREFIX@/lib/python3/dist-packages/"
else:
    python_externalproject_dir = "@EXTERNALPROJECT_INSTALL_PREFIX@/lib/python3.8/site-packages/"
    python_install_dir = "@CMAKE_INSTALL_PREFIX@/lib/python3.8/site-packages/"
search_path.insert(1, python_externalproject_dir)
search_path.insert(2, python_install_dir)

# Dependencies are automatically detected, but it might need
# fine tuning.
build_options = {
    "build_exe": "package/usr",
    "path": search_path,
    "packages": [
        "appdirs",
        "packaging",
        "cryptography",
        "xml.etree",
        "uuid",
        "UM",
        "cura",
        "zeroconf",
        "pkg_resources",
        "requests",
        "idna",
        "stl",
        "serial",
        "shapely",
        "networkx",
        "trimesh",
        "Savitar",
        "Charon",
        "logging",
        "logging.config",
        "logging.handlers",
    ],
    "include_files": [
        ("@EXTERNALPROJECT_INSTALL_PREFIX@/bin/CuraEngine", "bin/CuraEngine"),
        ("@EXTERNALPROJECT_INSTALL_PREFIX@/lib/cura/plugins", "share/cura/plugins"),
        ("@EXTERNALPROJECT_INSTALL_PREFIX@/lib/uranium/plugins", "share/uranium/plugins"),
        (os.path.join(python_externalproject_dir, "UM/Qt/qml/UM"), "share/uranium/resources/qml/UM"),
        ("@EXTERNALPROJECT_INSTALL_PREFIX@/share/cura/resources", "share/cura/resources"),
        ("@EXTERNALPROJECT_INSTALL_PREFIX@/share/uranium/resources", "share/uranium/resources"),
        ("@CMAKE_PREFIX_PATH@/lib/libprotobuf.so.3.9.2.0", "lib/libprotobuf.so.3.9.2.0"),
        ("@CMAKE_PREFIX_PATH@/lib/libArcus.so.3", "lib/libArcus.so.3"),
        ("@CMAKE_PREFIX_PATH@/lib/libSavitar.so.0", "lib/libSavitar.so.0"),
    ],

    # Known issue, see https://github.com/numpy/numpy/issues/13248
    # If "optimize" is set to 2, the packaged Cura will raise the following exception when it runs:
    #    """ TypeError: add_docstring() argument 2 must be str, not None """
    # Setting "optimize" to 0 is a workaround.
    "optimize": 0,

    "bin_path_includes": [
        "@CMAKE_PREFIX_PATH@/lib",
        "/lib",
        "/usr/lib",
        "/usr/lib/x86_64-linux-gnu",
        "/usr/local/lib",
    ],
    "bin_includes": [
        "libopenctm.so.1.0.3",
    ],
    "bin_excludes": [
        "linux-vdso.so.1",
        "libpthread.so.0",
        "libdl.so.2",
        "librt.so.1",
        "libstdc++.so.6",
        "libm.so.6",
        "libgcc_s.so.1",
        "libc.so.6",
        "ld-linux-x86-64.so.2",
        "libz.so.1",
        "libgcc_s.so.1",
        "libglib-2.0",
        "librt.so.1",
        "libcap.so.2",
        "libGL.so.1",
        "libGLX.so.0",
        "libGLdispatch.so.0",
        "libglapi.so.0",
        "libXext.so.6",
        "libXdamage.so.1",
        "libXfixes.so.3",
        "libX11-xcb.so.1",
        "libX11.so.6",
        "libxcb-glx.so.0",
        "libxcb-dri2.so.0",
        "libxcb.so.1",
        "libXxf86vm.so.1",
        "libdrm.so.2",
        "libexpat.so.1",
        "libXau.so.6",
        "libglib-2.0.so.0",
        "libgssapi_krb5.so.",
        "libgthread-2.0.so.0",
        "libk5crypto.so.3",
        "libkeyutils.so.1",
        "libkrb5.so.3",
        "libkrb5support.so.0",
        "libresolv.so.2",
        "libutil.so.1",
        "libXrender.so.1",
        "libcom_err.so.2",
        "libgssapi_krb5.so.2",
    ]
}

base = "Win32GUI" if sys.platform == "win32" else None

executables = [
    Executable(os.path.join("@EXTERNALPROJECT_INSTALL_PREFIX@", "bin", "cura"), base = base)
]

setup(
    name = "Ultimaker Cura",
    version = "@CURA_MAJOR_VERSION@.@CURA_MINOR_VERSION@.@CURA_PATCH_VERSION@",
    author = "Ultimaker B.V.",
    url="http://software.ultimaker.com/",
    description = "3D Slicer Software",
    license="GNU LESSER GENERAL PUBLIC LICENSE (LGPL)",

    options = { "build_exe": build_options },
    executables = executables
)
